# 单节点设置
singleServerConfig:
  address: redis://127.0.0.1:6379
  database: 0
  password:
  #  （连接空闲超时，单位：毫秒）如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒。
  idleConnectionTimeout: 10000
  #  未知
  pingTimeout: 1000
  #连接间隔 心跳
  pingConnectionInterval: 1000
  #  （连接超时，单位：毫秒）同节点建立连接时的等待超时。时间单位是毫秒。
  connectTimeout: 10000
  #  （命令等待超时，单位：毫秒）等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 3000
  #  （命令失败重试次数）如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retryAttempts: 3
  #  （命令重试发送时间间隔，单位：毫秒）在某个节点执行相同或不同命令时，连续 失败 failedAttempts（执行失败最大次数） 时，该节点将被从可用节点列表里清除，直到 reconnectionTimeout（重新连接时间间隔） 超时以后再次尝试。
  retryInterval: 1500
  #  （重新连接时间间隔 单位：毫秒）
  reconnectionTimeout: 3000
  #  （执行失败最大次数）
  failedAttempts: 3
  #  （客户端名称）
  clientName: null
  # 发布和订阅连接的最小空闲连接数 默认1 多从节点的环境里，每个 从服务节点里用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
  subscriptionConnectionMinimumIdleSize: 1
  # 发布和订阅连接池大小 默认50  多从节点的环境里，每个 从服务节点里用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  subscriptionConnectionPoolSize: 10
  # 单个连接最大订阅数量 默认5
  subscriptionsPerConnection: 5
  # 最小空闲连接数 默认32，现在暂时不需要那么多的线程 多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
  connectionMinimumIdleSize: 5
  # （连接池大小） 默认64，现在暂时不需要那么多的线程 在启用该功能以后，Redisson将会监测DNS的变化情况。
  connectionPoolSize: 20
  # （线程池数量）这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。

threads: 0
#（Netty线程池数量） 这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
nettyThreads: 0
  #（编码）Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储。
  # FstCodec  10倍于JDK序列化性能而且100%兼容的编码
  #codec:
  #  class: com.efh.otms.common.serializer.redisson.FstCodec
#  （传输模式）默认 NIO
transportMode: NIO